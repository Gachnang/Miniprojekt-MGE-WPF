<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:own="clr-namespace:ch.hsr.wpf.gadgeothek.admin.Theme">
    <!-- New Style for the buttons. -->
    <!-- TODO Can we make own properties for Hover-/PressedColor? -->
    <Style x:Key="ButtonStyle" TargetType="Button" BasedOn="{StaticResource ControlStyle}">
        <Setter Property="Background" Value="{StaticResource PrimaryNormalBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource PrimaryNormalBrush}" />
        <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="16 10 16 9" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="FontFamily" Value="{StaticResource FontFamily}" />
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- OuterBorder (Blue(Default) line around the button) -->
                    <Border x:Name="OuterBorder"
                            Background="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{StaticResource Control_OuterBorder_CornerRadius}">
                        <!-- InnerBorder (White line inside the button) -->
                        <Border x:Name="InnerBorder"
                                Background="{TemplateBinding Background}"
                                BorderThickness="{StaticResource BorderThickness}"
                                BorderBrush="{StaticResource DividerBrush}"
                                CornerRadius="{StaticResource Control_InnerBorder_CornerRadius}">
                            <Grid>
                                <!-- Canvas to hold "AnimationCircle" (Just because of "ClipToBounds") -->
                                <Canvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ClipToBounds="True">
                                    <!-- "AnimationCircle" when button was pressed: Shrink instantly and set Opacity to one, then grows back and fade out.  -->
                                    <Ellipse x:Name="AnimationCircle"
                                             HorizontalAlignment="Center"
                                             VerticalAlignment="Center"
                                             Opacity="0"
                                             Width="{TemplateBinding ActualWidth}"
                                             Height="{TemplateBinding ActualHeight}"
                                             RenderTransformOrigin=".5 .5">
                                        <Ellipse.RenderTransform>
                                            <ScaleTransform ScaleX="2" ScaleY="2" />
                                        </Ellipse.RenderTransform>
                                        <!-- Color of the Ellipse is PrimaryNormalColor -->
                                        <Ellipse.Fill>
                                            <SolidColorBrush Color="{StaticResource PrimaryNormalColor}" />
                                        </Ellipse.Fill>
                                    </Ellipse>
                                </Canvas>
                                <!-- The real Content of the Button (Normaly the text). -->
                                <ContentControl x:Name="Content"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            IsTabStop="False"
                                            Focusable="False"
                                            TextBlock.Foreground="{TemplateBinding Foreground}"
                                            Margin="{TemplateBinding Padding}"
                                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                            Content="{TemplateBinding Content}"
                                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                            </Grid>
                        </Border>
                        <!-- Animation happens here -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <!-- Set time for the animation -->
                                    <VisualTransition From="Pressed" To="Normal" GeneratedDuration="{StaticResource Control_AnimationDuration}" />
                                    <VisualTransition From="MouseOver" To="Normal" GeneratedDuration="{StaticResource Control_AnimationDuration}" />
                                    <!-- "PointerOver" is "MouseOver" in other version? Haven't take effect on my side.. -->
                                    <VisualTransition From="PointerOver" To="Normal" GeneratedDuration="{StaticResource Control_AnimationDuration}" />
                                    <!-- Animation after button was pressed. See "AnimationCircle". -->
                                    <VisualTransition 
                                        From="Pressed" 
                                        To="Any" 
                                        GeneratedDuration="{StaticResource Control_AnimationDuration}" >
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames 
                                                Storyboard.TargetProperty="RenderTransform.ScaleX" 
                                                Storyboard.TargetName="AnimationCircle"
                                                FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames 
                                                Storyboard.TargetProperty="RenderTransform.ScaleY" 
                                                Storyboard.TargetName="AnimationCircle"
                                                FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="2">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames 
                                                Storyboard.TargetProperty="Opacity" 
                                                Storyboard.TargetName="AnimationCircle"
                                                FillBehavior="HoldEnd">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.7" Value="0">
                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                        <SineEase EasingMode="EaseIn" />
                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                </EasingDoubleKeyFrame>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <!-- When nothing happens on the button -->
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="InnerBorder"
                                            To="{TemplateBinding Background}" />
                                    </Storyboard>
                                </VisualState>

                                <!-- When hover on the button -->
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="InnerBorder" 
                                            To="{StaticResource PrimaryHoverColor}" />
                                    </Storyboard>
                                </VisualState>

                                <!-- When the button is pressed -->
                                <VisualState x:Name="Pressed">
                                    <Storyboard >
                                        <ColorAnimation
                                            Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)"
                                            Storyboard.TargetName="InnerBorder"
                                            Duration="0:0:0.2"
                                            To="{StaticResource PrimaryPressedColor}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Apply the "ButtonStyle" on every button. -->
    <Style TargetType="Button" BasedOn="{StaticResource ButtonStyle}" />
</ResourceDictionary>